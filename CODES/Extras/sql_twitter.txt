
CREATE EXTERNAL TABLE IF NOT EXISTS covid_tweets_exp
(
id BIGINT,    
tweet STRING,    
user_name STRING,
user_statuses_count INT,
user_followers_count INT,
user_location STRING,
user_verified BOOLEAN,
tweet_fav_count INT,
retweet_count INT,
tweet_date STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ',';

load data inpath '/bda/twitter/final_white_plus_yellow_final.csv' into TABLE covid_tweets_exp;

create view temp_1 as select 
id,
covid_tweets_exp.tweet,
words 
from covid_tweets_exp 
lateral view explode(sentences(lower(tweet))) dummy as words;

create view temp_2 as select 
id,
temp_1.tweet, 
word 
from temp_1 
lateral view explode(words) dummy as word;

SELECT * FROM temp_2 limit 25;

CREATE EXTERNAL TABLE dictionary 
(
    type string,
    length int,
    word string,
    pos string,
    stemmed string,
    polarity string
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '	';

load data inpath '/bda/twitter/dictionary.tsv' into TABLE dictionary;

create view temp_3 as select
id,
temp_2.tweet,
temp_2.word,
case s_d.polarity 
when 'negative' then -1 
when 'positive' then 1 
else 0 
end as polarity
from temp_2 left outer join dictionary s_d on temp_2.word = s_d.word;

CREATE EXTERNAL TABLE covid_tweets
(
id BIGINT,    
tweet STRING,    
user_name STRING,
user_statuses_count INT,
user_followers_count INT,
user_location STRING,
user_verified BOOLEAN,
tweet_fav_count INT,
retweet_count INT,
tweet_date STRING
);

create view temp_1 as 
select 
id,
covid_tweets_exp.tweet,
words 
from covid_tweets_exp 
lateral view explode(sentences(lower(tweet))) dummy as words;

create view temp_2 as select 
id,
temp_1.tweet, 
word 
from temp_1 
lateral view explode(words) dummy as word;

CREATE EXTERNAL TABLE dictionary (
    type string,
    length int,
    word string,
    pos string,
    stemmed string,
    polarity string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '	'
STORED AS TEXTFILE
LOCATION '/user/maria_dev/dictionary';

load data inpath '/user/maria_dev/dictionary.tsv' into TABLE dictionary;

create view temp_3 as select
id,
temp_2.tweet,
temp_2.word,
case s_d.polarity
            when  'negative' then -1
            when 'positive' then 1
            else 0 
end as polarity
from temp_2 left outer join dictionary s_d on temp_2.word = s_d.word;
